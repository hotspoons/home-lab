MASTER_HOSTNAME=${master_hostname}
JOIN_CMD_PORT=${join_cmd_port}
JOIN_CMD_SALT=${join_cmd_salt}
JOIN_CMD_URL=${join_cmd_url}
EXTERNAL_DNS_IP=${external_dns_ip}
EXTERNAL_DNS_SUFFIX=${external_dns_suffix}

RESOLV_CONF_LOCATION=/etc/k8s-resolv.conf


################################################
## Setup firewall rules, DNS                  ##
################################################

if [[ -n "$EXTERNAL_DNS_IP" ]]; then
    if [[ -n "$EXTERNAL_DNS_SUFFIX" ]]; then
        echo "search $EXTERNAL_DNS_SUFFIX" >> $RESOLV_CONF_LOCATION
    fi
    echo "nameserver $EXTERNAL_DNS_IP" >> $RESOLV_CONF_LOCATION
else
    cp /etc/resolv.conf $RESOLV_CONF_LOCATION
fi

firewall-cmd --zone=public --permanent --add-port={80,443,10250,30000-32767}/tcp
firewall-cmd --reload

## TODO - Firewall rules prevent kube-vip from operating, need to figure out which ports are needed
## for now we just disable to save frustration
systemctl stop firewalld.service
systemctl disable firewalld.service


################################################
## Join cluster                               ##
################################################
URL="https://$MASTER_HOSTNAME:$JOIN_CMD_PORT/$JOIN_CMD_SALT/join_kubernetes_cluster.sh"
if [[ -n "$JOIN_CMD_URL" ]]; then
    URL="$JOIN_CMD_URL"
fi
while ! KUBE_JOIN_COMMAND=$(curl -k $URL)
do
    echo "Master join command not available, trying again in 5 seconds"
    sleep 5
done

$KUBE_JOIN_COMMAND

################################################
## Bash completion                            ##
################################################
kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl > /dev/null



###################################################
## Install NVidia drivers if this node has a GPU ##
###################################################
if [[ -n "$(lspci | grep -i NVIDIA | grep -i controller)" ]]; then

echo "blacklist nouveau" >> /etc/modprobe.d/blacklist-nouveau.conf
echo "options nouveau modeset=0" >> /etc/modprobe.d/blacklist-nouveau.conf
dracut --force

dnf install -y kernel-devel-$(uname -r) kernel-headers-$(uname -r)
curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | 
  tee /etc/yum.repos.d/nvidia-container-toolkit.repo

mv /etc/containerd/config.toml /etc/containerd/config.toml.orig
containerd config default > /etc/containerd/config.toml

dnf install -y nvidia-container-toolkit
nvidia-ctk runtime configure --runtime=containerd
nvidia-ctk runtime configure --runtime=docker

sed -i "s/SystemdCgroup = false/SystemdCgroup = true/g" /etc/containerd/config.toml

echo "/run/nvidia/driver/usr/lib64" >> /etc/ld.so.conf.d/nvidia.conf
echo " *  *  *  *  * root ldconfig" >> /etc/crontab
ln -s /usr/sbin/ldconfig /usr/sbin/ldconfig.real
ldconfig

ln -s /run/nvidia/driver/usr/bin/nvidia-smi /usr/bin/nvidia-smi

systemctl restart docker.service containerd.service

fi