MASTER_HOSTNAME=${master_hostname}
JOIN_CMD_PORT=${join_cmd_port}
JOIN_CMD_SALT=${join_cmd_salt}
DOMAIN=${domain}
WORKLOADS_ON_CONTROL_PLANE=${workloads_on_control_plane}
EXTERNAL_DNS_IP=${external_dns_ip}
EXTERNAL_DNS_SUFFIX=${external_dns_suffix}

KUBERNETES_VERSION=v1.28.2

### A lot of this is based on this article: https://www.linuxtechi.com/install-kubernetes-cluster-on-rocky-linux/
#Kubernetes utilities setup for persistent volumes, dashboard, and metal load balancer
DASHBOARD_URL=https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended.yaml
CALICO_URL=https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
RESOLV_CONF_LOCATION=/etc/k8s-resolv.conf

################################################
## Setup firewall rules, DNS                  ##
################################################

if [[ -n "$EXTERNAL_DNS_IP" ]]; then
    if [[ -n "$EXTERNAL_DNS_SUFFIX" ]]; then
        echo "search $EXTERNAL_DNS_SUFFIX" >> $RESOLV_CONF_LOCATION
    fi
    echo "nameserver $EXTERNAL_DNS_IP" >> $RESOLV_CONF_LOCATION
else
    cp /etc/resolv.conf $RESOLV_CONF_LOCATION
fi

firewall-cmd --zone=public --permanent --add-port={80,443,6443,2379,2380,10250,10251,10252,$JOIN_CMD_PORT}/tcp
firewall-cmd --zone=public --permanent --add-rich-rule "rule family=ipv4 source address=$(hostname -I |  awk '{print $1}')/32 accept"
firewall-cmd --zone=public --permanent --add-rich-rule "rule family=ipv4 source address=172.17.0.0/16 accept"
firewall-cmd --reload

## TODO - Firewall rules prevent kube-vip from operating, need to figure out which ports are needed
## for now we just disable to save frustration
systemctl stop firewalld.service


################################################
## Initialize cluster                         ##
################################################

## KUBERNETES_VERSION=$(kubectl version -o json | jq '.serverVersion.gitVersion' -r)

cat <<EOF > /tmp/kubeadm-config.yaml
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta3
kubernetesVersion: $KUBERNETES_VERSION
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
cgroupDriver: cgroupfs
resolvConf: $RESOLV_CONF_LOCATION
EOF

kubeadm init --config /tmp/kubeadm-config.yaml
mkdir -p /root/.kube
yes | cp /etc/kubernetes/admin.conf /root/.kube/config
chown $(id -u):$(id -g) /root/.kube/config
export KUBECONFIG=/etc/kubernetes/admin.conf
kubectl apply -f $CALICO_URL
systemctl restart containerd.service

if [[ -n "$WORKLOADS_ON_CONTROL_PLANE" ]]; then

  kubectl taint node $(hostname) node-role.kubernetes.io/control-plane:NoSchedule-

fi

kubectl get nodes


############################################################################
## Setup secure-ish URL for joining nodes to the cluster, host and store  ##
############################################################################

mkdir -p /tmp/join-cluster/$JOIN_CMD_SALT
kubeadm token create --print-join-command > /tmp/join-cluster/$JOIN_CMD_SALT/join_kubernetes_cluster.sh

cd /tmp/join-cluster/

openssl req -new -newkey rsa:4096 -nodes -keyout snakeoil.key -out snakeoil.csr -subj /C=US/ST=State/L=Locality/O=None/OU=None/CN=*.$DOMAIN
openssl x509 -req -sha256 -days 365 -in snakeoil.csr -signkey snakeoil.key -out snakeoil.pem


###
echo "from http.server import HTTPServer, SimpleHTTPRequestHandler" >> server.py
echo "from ssl import PROTOCOL_TLS_SERVER, SSLContext" >> server.py
echo "import io, sys" >> server.py

echo "class DirectoryHandler(SimpleHTTPRequestHandler):" >> server.py
echo "    def list_directory(self, path):" >> server.py
echo "        f = io.BytesIO()" >> server.py
echo '        f.write("<!DOCTYPE html><html><body><h1>nothing to see here...</h1></body></html>".encode())' >> server.py
echo "        length = f.tell()" >> server.py
echo "        f.seek(0)" >> server.py
echo "        self.send_response(200)" >> server.py
echo "        encoding = sys.getfilesystemencoding()" >> server.py
echo "        self.send_header('Content-type', 'text/html; charset=%s' % encoding)" >> server.py
echo "        self.send_header('Content-Length', str(length))" >> server.py
echo "        self.end_headers()" >> server.py
echo "        return f" >> server.py
echo "" >> server.py
echo "ssl_context = SSLContext(PROTOCOL_TLS_SERVER)" >> server.py
echo "ssl_context.load_cert_chain('snakeoil.pem', 'snakeoil.key')" >> server.py
echo "server = HTTPServer(('0.0.0.0', $JOIN_CMD_PORT), DirectoryHandler)" >> server.py
echo "server.socket = ssl_context.wrap_socket(server.socket, server_side=True)" >> server.py
echo "server.serve_forever()" >> server.py

python3 server.py &

export CLUSTER_JOIN_URL="https://$MASTER_HOSTNAME:$JOIN_CMD_PORT/$JOIN_CMD_SALT/join_kubernetes_cluster.sh"

cat << EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: cluster-join-url
type: Opaque
stringData:
  url: $CLUSTER_JOIN_URL
EOF

cat << EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: cluster-join-guid
type: Opaque
stringData:
  guid: $JOIN_CMD_SALT
EOF

echo "Serving join command with salted URL over tls: $CLUSTER_JOIN_URL, also available as Kubernetes secret \"cluster-join-url\""

################################################
## Bash completion                            ##
################################################
kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl > /dev/null

# kubeadm reset -f && rm -rf /etc/cni/net.d && rm -f $HOME/.kube/config && docker system prune -a -f

################################################
## Adding backup/restore scripts              ##
################################################

echo "#!/bin/bash" >> /usr/bin/backup-pvs
echo "mkdir pvs" >> /usr/bin/backup-pvs
echo "while read pv; do" >> /usr/bin/backup-pvs
echo "  LABEL=\$(kubectl get persistentvolumes -A \$pv -o yaml | yq '.spec.claimRef.name')" >> /usr/bin/backup-pvs
echo "  kubectl label -A --overwrite pv $pv \"selector=$LABEL\"" >> /usr/bin/backup-pvs
echo "  kubectl get persistentvolumes -A \$pv -o yaml | yq '.status.phase=\"Available\"' | yq '.spec.persistentVolumeReclaimPolicy=\"Retain\"' > pvs/\$pv.yaml" >> /usr/bin/backup-pvs
echo "  echo \"exporting \$pv to \$pv.yaml as Available\"" >> /usr/bin/backup-pvs
echo "done <<< \"\$(kubectl get persistentvolumes -A --no-headers -o custom-columns=':metadata.name')\"" >> /usr/bin/backup-pvs
echo "zip -r pvs.zip pvs/" >> /usr/bin/backup-pvs
chmod +x /usr/bin/backup-pvs

echo "#!/bin/bash" >> /usr/bin/backup-gitlab-certs
echo "mkdir gitlab-certs" >> /usr/bin/backup-gitlab-certs
echo "declare -a secrets=(\"wildcard-cert-tls\" \"gitlab-cert-tls\" \"gitlab-gitlab-tls\" \"gitlab-minio-tls\" \"gitlab-registry-tls\" \"gitlab-kas-tls\")" >> /usr/bin/backup-gitlab-certs
echo "for i in \"\$${secrets[@]}\"" >> /usr/bin/backup-gitlab-certs
echo "do" >> /usr/bin/backup-gitlab-certs
echo "  kubectl get secret -n default \$i -o yaml > gitlab-certs/\$i.yaml" >> /usr/bin/backup-gitlab-certs
echo "done" >> /usr/bin/backup-gitlab-certs
echo "zip -r gitlab-certs.zip gitlab-certs/" >> /usr/bin/backup-gitlab-certs
chmod +x /usr/bin/backup-gitlab-certs
 