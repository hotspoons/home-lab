

## NFS Configuration - set NFS server and path for dynamic storage for persistent volumes
NFS_SERVER=${nfs_server}
NFS_PATH=${nfs_path}
NFS_PROVISION_NAME=${nfs_provision_name}
## IP Address range for load balancer
START_IP=${start_ip}
END_IP=${end_ip}
POD_NETWORK_CIDR=${pod_network_cidr}
JOIN_CMD_PORT=${join_cmd_port}
VIP_IP=${vip_ip}
DOMAIN=${domain}
KUBERNETES_VERSION=v1.28.2

### A lot of this is based on this article: https://www.linuxtechi.com/install-kubernetes-cluster-on-rocky-linux/
#Kubernetes utilities setup for persistent volumes, dashboard, and metal load balancer
DASHBOARD_URL=https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended.yaml
METALLB_HELM_REPO=https://metallb.github.io/metallb
NFS_HELM_REPO=https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
CALICO_URL=https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
KUBE_VIP_URL=https://raw.githubusercontent.com/kube-vip/kube-vip-cloud-provider/main/manifest/kube-vip-cloud-controller.yaml
KUBE_VIP_RBAC_URL=https://kube-vip.io/manifests/rbac.yaml

################################################
## Setup firewall rules                       ##
################################################
firewall-cmd --zone=public --permanent --add-port={80,443,6443,2379,2380,10250,10251,10252,$JOIN_CMD_PORT}/tcp
firewall-cmd --zone=public --permanent --add-rich-rule "rule family=ipv4 source address=$(hostname -I |  awk '{print $1}')/32 accept"
firewall-cmd --zone=public --permanent --add-rich-rule "rule family=ipv4 source address=172.17.0.0/16 accept"
firewall-cmd --reload

## TODO - Firewall rules prevent kube-vip from operating, need to figure out which ports are needed
## for now we just disable to save frustration
systemctl stop firewalld.service

################################################
## Initialize cluster                         ##
################################################

## KUBERNETES_VERSION=$(kubectl version -o json | jq '.serverVersion.gitVersion' -r)

cat <<EOF > /tmp/kubeadm-config.yaml
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta3
kubernetesVersion: $KUBERNETES_VERSION
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
cgroupDriver: cgroupfs
EOF

kubeadm init --config /tmp/kubeadm-config.yaml
mkdir -p /root/.kube
yes | cp /etc/kubernetes/admin.conf /root/.kube/config
chown $(id -u):$(id -g) /root/.kube/config
export KUBECONFIG=/etc/kubernetes/admin.conf
kubectl apply -f $CALICO_URL
systemctl restart containerd.service
#kubectl taint node $(hostname) node-role.kubernetes.io/control-plane:NoSchedule-
kubectl get nodes


################################################
## Reset everything, clear docker cache       ##
################################################

mkdir -p /tmp/join-cluster
kubeadm token create --print-join-command > /tmp/join-cluster/join_kubernetes_cluster.sh

# TODO - this should probably be over SSL and at least use a shared secret to secure it

cd /tmp/join-cluster/
python3 -m http.server $JOIN_CMD_PORT &



################################################
## Configure Kube VIP Load Balancer           ##
################################################


kubectl get configmap -n kube-system kube-proxy -o yaml > /tmp/proxy.yaml
sed -i 's/strictARP: false/strictARP: true/g' /tmp/proxy.yaml
kubectl replace -f /tmp/proxy.yaml

kubectl apply -f $KUBE_VIP_URL
kubectl apply -f $KUBE_VIP_RBAC_URL
kubectl create configmap -n kube-system kubevip --from-literal range-global=$START_IP-$END_IP
export INTERFACE=$(ip route get 8.8.8.8 | sed -n 's/.*dev \([^\ ]*\).*/\1/p')
KVVERSION=$(curl -sL https://api.github.com/repos/kube-vip/kube-vip/releases | jq -r ".[0].name")
shopt -s expand_aliases
alias kube-vip="ctr image pull ghcr.io/kube-vip/kube-vip:$KVVERSION; ctr run --rm --net-host ghcr.io/kube-vip/kube-vip:$KVVERSION vip /kube-vip"
kube-vip manifest daemonset \
  --interface $INTERFACE \
  --address $VIP_IP --inCluster --taint --controlplane \
  --services --arp --leaderElection | tee kubevip.yaml
kubectl apply -f kubevip.yaml

################################################
## Configure auto-provisioned NFS storage     ##
################################################
helm repo add nfs-subdir-external-provisioner $NFS_HELM_REPO
helm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \
    --set nfs.server=$NFS_SERVER \
    --set nfs.path=$NFS_PATH \
    --set persistence.enabled=true \
    --set storageClass.defaultClass=true 

################################################
## Create TLS secret from certs               ##
################################################

kubectl create secret tls $DOMAIN-tls --cert=/etc/ssl/$DOMAIN/fullchain.pem --key=/etc/ssl/$DOMAIN/privkey.pem
echo "Created SSL secret: $DOMAIN-tls"

################################################
## Bash completion                            ##
################################################
kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl > /dev/null

# kubeadm reset -f && rm -rf /etc/cni/net.d && rm -f $HOME/.kube/config && docker system prune -a -f